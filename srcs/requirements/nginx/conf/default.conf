server 
{
    # Define un bloque de servidor virtual. NGINX puede alojar múltiples sitios (servidores)
    # y cada uno se configura dentro de un bloque 'server'.
    # Es el contenedor principal para la configuración de un sitio web o aplicación.

    listen 443 ssl;
    # Directiva 'listen': NGINX escuchará en el puerto 443 para conexiones entrantes.
    # 'ssl': Indica que la conexión será cifrada usando SSL/TLS.
    # Necesario para habilitar la escucha en el puerto HTTPS.

	listen [::]:443 ssl;
    # 'listen [::]:443 ssl': Similar a la anterior, pero para IPv6.
    # Permite que NGINX escuche en el puerto 443 para direcciones IPv6.
    # Necesario si se desea soporte IPv6.

    ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
    # 'ssl_certificate': Ruta al archivo del certificado SSL/TLS.
    # NGINX lo usa para identificarse y cifrar la comunicación.
    # Es esencial para 'listen ... ssl;'.

    ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
    # 'ssl_certificate_key': Ruta al archivo de la clave privada del certificado SSL/TLS.
    # Es esencial para 'listen ... ssl;'.

    ssl_protocols TLSv1.3;
    # 'ssl_protocols': Especifica las versiones del protocolo TLS/SSL que NGINX permitirá.
    # 'TLSv1.3': Es la versión más reciente y segura. Deshabilitar versiones antiguas
    # como TLSv1.0, TLSv1.1, o SSLv2, SSLv3 es una buena práctica de seguridad.
    # Estrictamente necesario si se desea controlar la seguridad del protocolo.
    # No tenerlo implicaría el uso de protocolos por defecto de NGINX, que podrían incluir versiones menos seguras.

    root /var/www/html;
    # 'root': Define el directorio raíz de los archivos que NGINX servirá para este servidor.
    # Cuando se solicita una URL, NGINX buscará los archivos dentro de este directorio.
    # Necesario para especificar dónde se encuentran los archivos web.

    index index.php;
    # 'index': Define los nombres de archivo que NGINX buscará como página de índice cuando se solicita un directorio.
    # Si una solicitud es a '/foo/', NGINX buscará '/foo/index.php' en este caso.
    # Necesario si se desea un archivo de índice por defecto diferente a 'index.html'.

    location ~ [^/]\.php(/|$) 
	{
		# 'location': Define cómo NGINX manejará las solicitudes que coincidan con un patrón específico.
		# '~ [^/]\.php(/|$)': Es una expresión regular que coincide con URLs que terminan en '.php'
		# o tienen '.php/' seguido de algo (ej. /path/to/script.php o /path/to/script.php/extra).
		# Necesario para procesar archivos PHP.

		try_files $uri =404;
		# 'try_files': Intenta servir archivos en un orden específico.
		# '$uri': Intenta servir el URI solicitado directamente.
		# '=404': Si lo anterior falla, devuelve un error 404.
		# Ayuda a prevenir la ejecución de archivos PHP inexistentes. Necesario para un manejo adecuado de archivos.

		fastcgi_pass wordpress:9000;
		# 'fastcgi_pass': Pasa la solicitud a un servidor FastCGI.
		# 'wordpress:9000': El nombre de host del servicio FastCGI (probablemente PHP-FPM) y el puerto.
		# Asume que hay un servicio llamado 'wordpress' resoluble en la red de Docker.
		# Esencial para que NGINX pueda procesar archivos PHP.

		include fastcgi_params;
		# 'include fastcgi_params': Incluye un conjunto de parámetros FastCGI estándar que NGINX
		# utiliza para comunicarse con el servidor FastCGI. Estos parámetros son definidos
		# en un archivo estándar de NGINX (típicamente en /etc/nginx/fastcgi_params).
		# Necesario para una comunicación correcta con PHP-FPM.

		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		# 'fastcgi_param SCRIPT_FILENAME': Define un parámetro FastCGI específico.
		# Esencial para que PHP-FPM sepa qué script PHP debe ejecutar.
		# '$document_root': La ruta definida por la directiva 'root'.
		# '$fastcgi_script_name': La parte del URI que corresponde al nombre del script PHP.
		# Esencial para que PHP-FPM encuentre y ejecute el script correcto.
    }
}


server {
    listen 80;
    server_name localhost;

    root /var/www/html;
    index index.php;

    location / {
        try_files $uri $uri/ /index.php?$args;
    }

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass wordpress:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }

    location ~ /\.ht {
        deny all;
    }
}