server {
    listen 443 ssl;
    listen [::]:443 ssl;

    server_name dangonz3.42.fr;

    ssl_certificate /etc/nginx/ssl/inception.crt;
    ssl_certificate_key /etc/nginx/ssl/inception.key;

    ssl_protocols TLSv1.3;

    root /var/www/html;
    index index.php index.html;

    location / {
        try_files $uri $uri/ /index.php?$args;
    }

    location ~ \.php$ {
        include fastcgi_params;
        fastcgi_pass wordpress:9000;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    }
}

# listen 443 ssl
#	443 es el puerto estandard para peticiones HTTPS.
#	ssl le dice que acepte unicamente conexiones cifradas.
#	SSL (SecureSocketsLayer) es un protocolo criptográfico, el predecesor de TLS (TransportLayerSecurity).
#	TLS es el standard actual para la mayoría de las aplicaciones de internet.
#	usamos TLS, pero en las directivas se sigue poniendo SSL por motivos historicos.
# index index.php;
#	el archivo a mostrar por defecto.
#	los archivos de Wordpress incluyendo index.php se montarán en el root de NGINX.
# configuración de la conexión cifrada HTTPS:
#	- ssl_certificate: ruta al certificado público (.crt).
#	el servidor se lo envía al navegador para verificar su identidad.
#	- ssl_certificate_key: ruta a la clave privada (.key).
#	el servidor la usa para descifrar el premaster secret que le envía el cliente.
#	- ssl_protocols: especifica que versión de TLS se usara. Se desactivan versiones más antiguas.
# try_files $uri $uri/ /index.php?$args;
#	NGINX intentara en orden:
#	1. $uri buscar un archivo con el nombre exacto de la petición (/logo.png).
#	2. $uri/ buscar un directorio con ese nombre.
#	3. la petición se pasa a php. El URI pasa a ser index.php. 
#	$args es la QUERY_STRING del URL original (los valores del URL tras '?').
#	En este contexto $ se usa para indicar que lo que sigue es una variable interna de NGINX.
# location ~ \.php$
#	captura cualquier petición que acabe en php.
#	~ le indica a NGINX que distinga entre mayúsculas y minúsculas ("/index.PHP" no entraría en esta location).
#	\ escapa el punto, para que sea un caracter literal, sin esto '.' significaria "cualquier caracter".
#	$ indica el final de la cadena, de forma que /index.php/test no entraría en esta location por tener "/test".
#	NGINX no procesa peticiones php, las reenvía al servicio PHP-FPM, que a su vez ejecuta el código de la aplicación Wordpress:
#	- PHP: HypertextPreprocessor
#	- FPM: FastCGI Process Manager. Al contrario que CGI que inicia y destruye un proceso por cada petición,
#	fastCGI matiene los procesos de la aplicación (los que ejecutan los scripts, ej:WordPress) activos en segundo plano.
# try_files $uri =404;
#	comprueba si el .php existe, de lo contrario devuelve un error 404 (Not Found).
# include fastcgi_params;
#	carga el archivo fastcgi_params, que incluye algunos headers del request original
#	como QUERY_STRING o REQUEST-METHOD (GET, POST...)
#	e información sobre el servidor, ej: la IP, el nombre del servidor...
#	no lo incluimos por defecto, porque NGINX no lo necesita para peticiones que no sean PHP o similares.
# fastcgi_pass wordpress:9000;
#	NGINX reenvía las peticiones PHP al puerto 9000 del contendor wordpress.
#	en ese puerto, por convención, escucha el servicio PHP-FPM.
# fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
#	le comunica a PHP-FPM la ruta absoluta del script a procesar.
#	define la variable SCRIPT_FILENAME: la ruta absoluta al script, combina:
#	$document_root: el root de NGINX (ej:var/www/html).
#	$fastcgi_script_name: el URI de la petición (ej:/index.php).

# server
# {
#     listen 443 ssl;
#     server_name dangonz3.42.fr;

#     root /var/www/html;
#     index index.php;

#     ssl_certificate		/etc/ssl/certs/nginx-selfsigned.crt;
#     ssl_certificate_key	/etc/ssl/private/nginx-selfsigned.key;
#     ssl_protocols		TLSv1.3;

#     location / 
# 	{
#         try_files $uri $uri/ /index.php?$args;
#     }

#     location ~ \.php$ 
# 	{
# 		try_files $uri =404; 
#         include fastcgi_params;
#         fastcgi_pass wordpress:9000;
#         fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
#     }
# }

# --- NOTAS ---

# TLS Handshake
# Objective: to authenticate the server to the client and to have both parties securely negotiate a 
# shared secret (session key) for encrypting subsequent communication.
# 1. Client Hello: the client sends a message to the server:
#	- The TLS protocol versions the client supports.
#	- A list of cryptographic algorithms (cipher suites) the client can use. Cipher suite: un conjunto de algoritmos 
#	que definen los parámetros criptográficos para una conexión TLS.
#	- A random string of bytes, known as the Client Random.
# 2. Server Hello and Certificate Exchange:
#	- Server Hello: confirms the chosen protocol version and cipher suite from the list provided by the client. 
#	- The server generates and sends its own Server Random value.
#	- Certificate Exchange: The server sends its SSL/TLS Certificate. This certificate contains the server's public key 
#	and identity information, which has been digitally signed by a trusted Certificate Authority (CA).
# 3. Certificate Verification and Key Exchange:
#	- Certificate Validation: The client verifies the server's certificate against its list of trusted CAs.
#	- Key Generation: The client generates another random value, the premaster secret.
#	- Asymmetric Encryption: The client encrypts the premaster secret using the server's public key. 
#	- It then sends this encrypted value to the server, only the holder of the corresponding private key can decrypt this message. 
#	By successfully decrypting the premaster secret, the server proves it possesses the private key and is therefore legitimate.
# 4. Session Key Generation and Encrypted Session
#	Both have the same three pieces of information: the Client Random, the Server Random, and the premaster secret. 
#	Both parties independently use these values to derive an identical set of symmetric session keys.
#	From this point forward, all application data between the client and server is encrypted and decrypted using these symmetric keys.

# Script vs binario
# 	Script: legible por humanos, necesita un shoftware intérprete para procesarse
# 	Binario: ilegible (código maquina), ejecutable directamente por el procesador