#--- Flujo del servidor ---
# Flujo de Petición Dinámica (Página PHP)

# 1.  Usuario → Nginx
#   Un navegador envía una petición HTTP al puerto público (ej. `8080`).

# 2.  Nginx → WordPress
#   Nginx determina que la petición es para un recurso dinámico (un fichero `.php`).
#   Reenvía la petición a través de la red interna al servicio `wordpress` en el puerto `9000` (PHP-FPM).

# 3.  WordPress ↔ MariaDB
#   El proceso PHP de WordPress se ejecuta.
#   Para construir la página, realiza consultas SQL al servicio `db` en el puerto `3306`.
#   MariaDB procesa las consultas y devuelve los datos a WordPress.

# 4.  WordPress → Nginx
#   Con los datos de la base de datos, WordPress termina de generar la página HTML completa.
#   Envía el HTML resultante de vuelta a Nginx.

# 5.  Nginx → Usuario
#   Nginx recibe el HTML y lo reenvía al navegador del usuario como respuesta final.

# Flujo de Petición Estática (Imagen, CSS, JS)

# 1.  Usuario → Nginx
#   El navegador solicita un fichero estático (ej. `style.css` o `logo.png`).

# 2.  Nginx → Usuario
#   Nginx localiza el fichero directamente en el volumen montado (`/var/www/html`).
#   Sirve el fichero directamente al usuario sin contactar a ningún otro servicio.
#   En este segundo flujo, los contenedores de `WordPress` y `MariaDB` no realizan ningún trabajo, lo que reduce la carga y aumenta la velocidad.*

services:
  #--- Servicio MariaDB ---
  # build: Construye la imagen a partir del Dockerfile ubicado en la ruta especificada.
  # container_name: Asigna un nombre fijo al contenedor para fácil identificación.
  # volumes: Monta un directorio del host en el contenedor para que los datos de la base de datos persistan.
  # networks: Conecta el servicio a la red personalizada 'super_network'.
  # restart: Configura el contenedor para que se reinicie siempre, a menos que se detenga manualmente.
  # environment: Define variables de entorno. El sufijo '_FILE' indica al contenedor que lea el valor desde el fichero secreto correspondiente.
  # secrets: Otorga al contenedor acceso a los secretos de Docker definidos a nivel raíz.
  mariadb:
    build: ./requirements/mariadb
    container_name: mariadb_service
    volumes:
      - ${DATA_PATH}/db_data:/var/lib/mysql
    networks:
      - super_network
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD_FILE: /run/secrets/db_password
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
    secrets:
      - db_password
      - db_root_password

  #--- Servicio WordPress ---
  # build: Construye la imagen a partir del Dockerfile de WordPress.
  # container_name: Asigna un nombre fijo al contenedor.
  # depends_on: Asegura que el servicio 'mariadb' se inicie antes que este servicio.
  # volumes: Monta el directorio de datos de WordPress para que los ficheros (temas, plugins, uploads) persistan.
  # networks: Conecta el servicio a la red 'super_network'.
  # restart: Configura el reinicio automático.
  # environment: Define variables para que WordPress se conecte a la base de datos, usando secretos para la contraseña.
  # secrets: Otorga acceso al secreto que contiene la contraseña de la base de datos.
  wordpress:
    build: ./requirements/wordpress
    container_name: wordpress_service
    depends_on:
      - mariadb
    volumes:
      - ${DATA_PATH}/wp_data:/var/www/html
    networks:
      - super_network
    restart: unless-stopped
    environment:
      WORDPRESS_DB_HOST: mariadb:3306
      WORDPRESS_DB_NAME: ${MYSQL_DATABASE}
      WORDPRESS_DB_USER: ${MYSQL_USER}
      WORDPRESS_DB_PASSWORD_FILE: /run/secrets/db_password
    secrets:
      - db_password

  #--- Servicio Nginx ---
  # build: Construye la imagen del servidor web Nginx.
  # container_name: Asigna un nombre fijo al contenedor.
  # depends_on: Asegura que el servicio 'wordpress' esté disponible antes de iniciar Nginx.
  # ports: Mapea el puerto 8080 del host al puerto 80 del contenedor, exponiendo el servicio.
  # volumes: Define los volúmenes para Nginx.
  # volumes -: Monta el mismo volumen de WordPress para servir ficheros estáticos directamente.
  # volumes -: Monta el fichero de configuración personalizado de Nginx dentro del contenedor.
  # networks: Conecta el servicio a la red 'super_network'.
  # restart: Configura el reinicio automático.
  nginx:
    build: ./requirements/nginx
    container_name: nginx_service
    depends_on:
    - wordpress
    ports:
    - "8080:80"
    volumes:
    - ${DATA_PATH}/wp_data:/var/www/html
    - ./requirements/nginx/conf/default.conf:/etc/nginx/conf.d/default.conf
    networks:
    - super_network
    restart: always

#--- Configuración Global ---
# volumes: Declara los volúmenes nombrados para que Docker los gestione y los datos persistan.
# networks: Declara la red personalizada para permitir la comunicación entre servicios por su nombre.
# networks - driver: Especifica que se usa el driver 'bridge', estándar para comunicación en un mismo host.
# secrets: Define los secretos, indicando la ruta en el host del fichero que contiene el valor sensible.
volumes:
  db_data:
  wp_data:

networks:
  super_network:
    driver: bridge

secrets:
  db_password:
    file: ./secrets/db_password.txt
  db_root_password:
    file: ./secrets/db_root_password.txt
