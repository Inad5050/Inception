services:
# --- Servicio MariaDB ---
# 	Usamos un atajo para especificar el contexto de construcción de la imagen y
# build: Construye la imagen a partir del Dockerfile ubicado en la ruta especificada.
# 	la úbicación del Dockerfile (en el root del directorio especificado) a la vez.
# 	La forma explicita seria:
# 		context: ./ruta_al_directorio
# 		dockerfile: ./ruta_al_Dockerfile
# container_name: Asigna un nombre fijo al contenedor.
# image: cuando está presente junto a build pasa a simplemente nombrar la imagen de docker, si no se usa un nombre por defecto.
# volumes: Monta un directorio del host en el contenedor para que los datos de la base de datos persistan.
#	montar: la acción lógica de hacer que un sistema de archivos o un almacenamiento de datos sea accesible en un punto específico,
#		establecer un enlace directo entre el directorio del host (/home/dangonz3/data/db_data) y el directorio del contenedor (/var/lib/mysql).
# networks: Conecta el servicio a la red personalizada 'inception_network'.
# restart: el contenedor se reiniciará si falla, pero no si ha sido detenido manualmente por un usuario.
# secrets: Otorga al contenedor acceso a los secretos de Docker definidos en el nivel raíz de docker-compose.
#	Cuando declaramos secrets: docker coge el contenido del archivo local y crea un nuevo archivo en el contenedor,
#		en la ruta /run/secrets.
#	run es una ubicación estándar en los sistemas operativos Linux modernos para almacenar datos de tiempo de ejecución.
#	Durante la configuración inicial MariaDB necesita permisos root para: crear la base de datos para WordPress,
#		crear el usuario para WordPress y otorgar privilegios a ese usuario.
#		Tras la configuración inicial, WordPress ya no necesita el acceso root y utiliza el usuario con privilegios limitados que se acaba de crear.
# environment: Define variables de entorno.
#	El sufijo '_FILE' les indica a los scripts de inicialización de MariaDB y WordPress que no les estamos pasando el valor de la variable,
#		sino de la ruta del archivo donde el valor de la variable de entorno está almacenado.
#	MYSQL_PASSWORD_FILE: le indica al script de inicialización de MariaDB dónde encontrar la contraseña del usuario (dentro del contenedor).
#	MYSQL_ROOT_PASSWORD_FILE: le indica dónde encontrar la contraseña del usuario root.
  mariadb:
    image: mariadb
    container_name: mariadb
    build: ./requirements/mariadb
    ports:
      - "3306:3306"
    volumes:
      - /home/dangonz3/data/mariadb_data:/var/lib/mysql
    networks:
      - inception_network
    restart: always
    secrets:
      - db_password
      - db_root_password
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD_FILE: /run/secrets/db_password
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password

# --- Servicio WordPress ---
# container_name: Asigna un nombre fijo al contenedor.
# image: cuando está presente junto a build pasa a simplemente nombrar la imagen de docker, si no se usa un nombre por defecto.
# build: Construye la imagen a partir del Dockerfile de WordPress.
# depends_on: Asegura que el servicio 'mariadb' se inicie antes que este servicio.
# volumes: Monta el directorio de datos de WordPress para que los ficheros (temas, plugins, uploads) persistan.
# networks: Conecta el servicio a la red 'inception_network'.
# restart: Configura el reinicio automático.
#	unless-stopped: el contenedor se reiniciará si falla, pero no si ha sido detenido manualmente por un usuario.
# secrets: Otorga acceso al secreto que contiene la contraseña de la base de datos.
#	WordPress solo necesita conocer el usuario y contraseña que usara para acceder a MariaDB.
#		Las credenciales root son solo necearias para la configuración inicial de MariaDB.
# environment: Define variables para que WordPress se conecte a la base de datos, usando secretos para la contraseña.
# 	Cuando se utiliza la directiva secrets en Docker Compose, Docker toma el contenido del archivo en el host y 
#	lo monta como un archivo dentro del contenedor en una ruta específica. Por defecto: /run/secrets/<nombre_del_secreto>.
  wordpress:
    image: wordpress
    container_name: wordpress
    build: ./requirements/wordpress
    depends_on:
      - mariadb
    volumes:
      - /home/dangonz3/data/wordpress_data:/var/www/html
    networks:
      - inception_network
    restart: always
    secrets:
      - db_password
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD_FILE: /run/secrets/db_password
      DOMAIN_NAME: ${DOMAIN_NAME}

      WP_TITLE: ${WP_TITLE}
      WP_ADMIN_USER: ${WP_ADMIN_USER}
      WP_ADMIN_PASSWORD_FILE: /run/secrets/wp_admin_password
      WP_ADMIN_EMAIL: ${WP_ADMIN_EMAIL}

      WP_USERNAME: ${WP_USERNAME}
      WP_USER_EMAIL: ${WP_USER_EMAIL}
      WP_USER_PASSWORD: /run/secrets/wp_user_password

# --- Servicio Nginx ---
# container_name: Asigna un nombre fijo al contenedor.
# image: cuando está presente junto a build pasa a simplemente nombrar la imagen de docker, si no se usa un nombre por defecto.
# build: Construye la imagen del servidor web Nginx.
# depends_on: Asegura que el servicio 'wordpress' esté disponible antes de iniciar Nginx.
# ports: Mapea el puerto 443 del host al puerto 443 del contenedor.
# volumes: Define los volúmenes para Nginx.
#	el volumen de WordPress para servir ficheros estáticos directamente.
# networks: Conecta el servicio a la red 'inception_network'.
# restart: Configura el reinicio automático.
#	always: El contenedor se reiniciará siempre que se detenga. Para garantizar que este siempre disponible.
  nginx:
    image: nginx
    container_name: nginx
    build: ./requirements/nginx
    depends_on:
    - wordpress
    ports:
    - "443:443"
    volumes:
    - /home/dangonz3/data/wordpress_data:/var/www/html
    networks:
    - inception_network
    restart: always

# networks: Declara la red personalizada para permitir la comunicación entre servicios por su nombre.
#   driver: Especifica que se usa el driver 'bridge', estándar para comunicación en un mismo host. \
# Siempre está disponible. Es un componente del demonio de Docker.
# Si omites la sección networks, Docker Compose crea automáticamente una red de tipo bridge.
networks:
  inception_network:
    driver: bridge

# secrets: Define los secretos, indicando la ruta en el host del fichero que contiene el valor sensible.
# son las contraseñas de la base de datos mariaDB y WP.
secrets:
  db_password: #nombre del secreto
    file: ../secrets/db_password.txt
  db_root_password:
    file: ../secrets/db_root_password.txt
  wp_admin_password:
    file: ../secrets/wp_admin_password.txt
  wp_user_password:
    file: ../secrets/wp_user_password.txt
